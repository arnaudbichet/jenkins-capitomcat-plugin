# Capitomcat
require 'capitomcat'

namespace :capitomcat_jenkins do
  desc <<-DESC
    Capitomcat deploy task for Jenkins plugin(jenkins-capitomcat-plugin)
  DESC
  task :deploy do
    listener = fetch(:listener)

    deploy_type = 'Basic'
    if fetch(:use_context_update) == true then
      deploy_type = 'with Context file updating'
    end

    listener.info '---------------------------------------------------------------------------'
    listener.info "Capitomcat Tomcat Deploy : [#{deploy_type}]"
    listener.info '---------------------------------------------------------------------------'

    on roles(:app), in: get_parallelism, wait: 5 do |host|

      if fetch(:use_context_update) == true then
        listener.info "[#{host}] Uploading WAR file : #{fetch(:local_war_file)} => #{fetch(:tomcat_war_file)}"
        upload_war_file

        listener.info "[#{host}] Stopping Tomcat    : #{fetch(:tomcat_cmd)} stop"
        stop_tomcat
        check_tomcat_stopped

        listener.info "[#{host}] Updating Context   : #{fetch(:tomcat_context_file)}, #{fetch(:tomcat_context_path)}, #{fetch(:tomcat_war_file)}"
        upload_context_file

        listener.info "[#{host}] Cleaning-up Tomcat Work directory : #{fetch(:tomcat_work_dir)}"
        cleanup_work_dir

        listener.info "[#{host}] Starting Tomcat    : #{fetch(:tomcat_cmd)} start"
        start_tomcat
        check_tomcat_started
        listener.info "[#{host}] >>>> Complete"
      else
        listener.info "[#{host}] Stopping Tomcat    : #{fetch(:tomcat_cmd)} stop"
        stop_tomcat
        check_tomcat_stopped

        listener.info "[#{host}] Uploading WAR file : #{fetch(:local_war_file)} => #{fetch(:tomcat_war_file)}"
        upload_war_file

        listener.info "[#{host}] Cleaning-up Tomcat Work directory : #{fetch(:tomcat_work_dir)}"
        cleanup_work_dir
        
        listener.info "[#{host}] Cleaning-up WAR directory : #{fetch(:tomcat_war_dir)}"
        cleanup_war_dir

        listener.info "[#{host}] Starting Tomcat    : #{fetch(:tomcat_cmd)} start"
        start_tomcat
        check_tomcat_started
        listener.info "[#{host}] >>>> Complete"
      end
    end
    listener.info '---------------------------------------------------------------------------'
  end
  
  # Clean-up war directory
  def cleanup_war_dir
    # local variables
    tomcat_war_dir = fetch(:tomcat_war_dir)
    tomcat_user = fetch(:tomcat_user)

    if dir_exist?(tomcat_war_dir)
      execute :sudo, '-u', tomcat_user, 'rm -rf', tomcat_war_dir
    else
      warn('Tomcat war directory does not exist.')
    end
  end  
  
end